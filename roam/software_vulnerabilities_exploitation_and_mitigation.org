:PROPERTIES:
:ID:       39ee669b-9493-49ea-a13f-276d16d401c6
:ROAM_ALIASES: SVEM
:END:
#+title: Software Vulnerabilities: Exploitation and Mitigation
#+date: [2023-02-27 Mon 10:58]
#+FILETAGS: erasmus university compsci
* Principles
** Computer Security and Software Development
*** Software Life Cycle
*** Confidentiality, Integrity, Availability
*** Authentication & Access Control
*** Software Vulnerabilities
** Computer Architecture
* Memory Attacks and Defenses
** Buffer overflow
Can occur with languages with no built-in memory defense.
- =C=, =C++=

A buffer is a data container, sequence. An array basically.
Accessed using an index.
If you access over the length of the buffer:
- nothing happens
  + could happen if the =OS= allocated more than needed
- segfault
  + reaching a zone not allocated to the program
  + this is detected by =OS= and stopped
  + this could corrupt data
- custom code execution
  + understanding the overwrite done by the overflow an attacker could put something calling custom code in this segment
  + =C= functions are identified by memory =@addresses=
  + when a function $F_{1}$ calls $F_{2}$  the address of the former is stored on the *stack*
    - this way $F_{2}$ knows where to return once done
  + local variables of the callee are stored on the stack

The /analyst/ can hijack the control flow if the memory addresses of the stack/function are fixed. This is not the case anymore.

Usually the custom code executed is a *reverse shell* to take control of the computer.
** Heap overflow
** Integer overflow
** String format vulnerabilities
** Type confusion
** Use After Free
* High Level Attacks and Defenses
** SQL injection
** OS command injection
** Cross-Site Scripting
** Confused deputy
* Finding Software Vulnerabilities
** Static Program Analysis
** Dynamic Program Analysis
