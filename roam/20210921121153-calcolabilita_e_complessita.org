:PROPERTIES:
:ID:       b9d02edb-6458-4237-88de-41fb865974d2
:ROAM_ALIASES: CalcCompl
:END:
#+title: Calcolabilitá e Complessitá
[[id:f956b52b-6fe3-4040-94e5-7474d1813a38][$university]]
Prof: Stefano Berardi
* Info Corso
- Orari:
  + Lun 9-11
  + Mer 9-11
- Testo:
  + [[id:e5d00ea5-5ff0-4025-a0f6-38c9f5ad26e6][Introduction to the theory of Computation]]
- Link:
  + https://turingmachinesimulator.com/
* Teoria
** Macchina di Turing
_The Church-Turing Thesis_
Utilizzata per definire un problema risolvibile
- nato per dare una definizione semplice di risolvibilitá
  + un qualsiasi computer puó essere ridefinito con una =MdT= equivalente
- unico accesso alla memoria
  - come un nastro, legge dall'inizio fino alla fine
    + lenta
    + non é una architettura realmente implementabile

Caratterizzata da:
- controllo
  + stati interni
    - che definiscono comportamenti diversi
- memoria/tape
  + testa di lettura
  + alfabeto a scelta
La macchina é infinita ma la memoria é infinita

- l'Input é finito
- la fine del Input é marcata con un simbolo speciale

A differenza degli Automi a Stati Finiti puó sovrascrivere, appunta per aiutarsi nell'esecuzione
- una macchina di turing puó simulare qualsiasi macchina a differenza di un DFA
La Macchina di Turing essendo estremamente semplice é ottima per lo studio

*** Definizione Formale
~MT 1936~
7-tupla $(Q,\Sigma,\Gamma,\delta,q_0,q_{accept},q_{reject})$
1. $Q$: insieme di stati
2. $\Sigma$: alfabeto di Input non contenente il simbolo di blank
3. $\Gamma$: alfabeto del nastro
4. $\delta: Q \times \Gamma \rightarrow Q \times \Gamma \times \{L,R\}$: funzione di transizione
   *  Left (<) / Right (>)
5. $q_{accept}$


- Lo stato di rifiuto non viene inserito, é sottointeso a ogni Input non riconosciuto una transizione allo stato di rifiuto, bloccante
- Lo stato $S$ di =StayPut= é simulabile muovendosi continuamente $L$ e $R$, raddoppiando gli stati
- Il nastro infinito a destra e sinistra si simula sulle celle pari e dispari su un nastro infinito solamente a destra

*** Grafi
**** Stringhe Uguali
[[../media/img/grafoEs1.jpg]]
**** Stringa di 0 di lunghezza 2^n
[[../media/img/graphPowerOfTwoLength.jpg]]
*** Macchine Turing a piú registri
Con piú /tapes/ diventa molto piú semplice controllare stringhe, ci si avvicina nel comportamente ad una macchina di Von Neumann
Il primo nastro é l'Input, gli altri sono registri
$\delta: Q \times \Gamma^{k} \longrightarrow Q \times \Gamma^{k} \times \{L,R,S\}^{k}$
- con $k$ simboli / tapes
- $S$ é =StayPut=

Si puó simulare una ~MT~ a piú nastri con una ~MT~ ad un nastro solo
- perché? per semplificare la definizione di calcolo
- se un algoritmo a piú nastri é lineare su un nastro solo sará quadratico
[[../media/img/3tapes1tape.jpg]]
** Decidibilitá
Per un =DFA= possiamo definire una =TM M= che lo simula e verifica l'accettazione o meno dell'Input
[[file:../media/img/decidable-recognizable.jpg][Decidable - Turing-recognizable]]
- =NFA= convertibili
- =RegEx= convertibili

*** Problemi Decibidili
$E_{\textsc{dfa}} = \{\langle A \rangle\ \mid A\mbox{ is a \textsc{dfa} and } L(A)=\emptyset}$
- decidibile studiando i percorsi nel grafo delle transizioni
$EQ_{\textsc{dfa}} = \{\langle A \rangle\ \mid A\mbox{ is a \textsc{dfa} and } L(A)=\emptyset}$
- automa che descrive la differenza simmetrica dei linguaggi
- si riconduce a $E_{\textsc{dfa}}$
$A_{\textsc{CFG}}=\{\langle G,w \rangle \mid G\mbox{ is a \textsc{CFG} that generates string }w\}$
- tempo di accettazione $2^n$
- non c'é problema di fermata
$E_{\textsc{CFG}}=\{\langle G \rangle \mid G\mbox{is a \textsc{CFG} and }L(G) = \emptyset\}$

*** Teorema di Post
=4.22=
Linguaggio $L$ decidibile $\iff$ e' _positivamente_ e _negativamente_ decidibile
- $M$ termina sempre $\forall w \in \Sigma^{*}$
- $M$ é un decisore che simula $M_{1}$ e $M_{2}$ in parallelo
  + il primo che termina decide
*** Problemi Indecidibili
Per molti problemi si utilizza la tecnica della riduzione
- se un problema che sappiamo non decidibile si puó ridurre al problema che stiamo studiando allora anche questo non sará decibidile
**** Egualianza Chompsky
$EQ_{\textsc{CFG}}=\{\langle G,H \rangle \mid G\mbox{ and }H\mbox{ are \textsc{CFG}s and }L(G) = L(H)\}$
**** Accettazione e Fermata
Problema _positivamente decidibile_
$M_{\textsc{TM}}=\{\langle M,w \rangle \mid M\mbox{ is a \textsc{TM} and }M\mbox{ accepts }w\}$
- simulabile con una macchina =U= di Turing universale
  + macchina capace di simulare qualsiasi macchina utilizzando 5 tape
- si osserva l'esecuzione che non termina
Si prova utilizzando la tecnica della /diagonalizzazione/ scoperta dal matematico [[id:b5e515b5-ab9b-4dc5-87d4-bcfc1d8e8618][Georg Cantor]] nel 1873
- iniezione - biezione
  + corrispondenza 1 a 1
- prova che non esiste una enumerazione per un dato insieme di numeri
  + per i Reali si cambia nella ennesima enumerazione la ennesima cifra dopo la virgola
    * si trova cosí un numero che differisce per una cifra da tutti i numeri enumerati
- esistono infinite terne
Supponiamo che =H= esista, e accetti se =M= accetta =w= e viceversa
=D= prende in input una macchina =M= e con un decisore =H= che decide =M= con input la propria descrizione $\langle M \rangle$, accetta se =H= rifiuta e viceversa, continua con altre macchine
- diagonalizza infinite macchine =M=
Allora si procede diagonalizzando con $D$ applicato a $\langle D\rangle$
- dovrebbe rifiutare se $D$ accetta
- dovrebbe accettare altrimenti
  + non puó terminare perché per terminare avrebbe bisogno di dare la risposta opposta di se stesso
_Abbiamo raggiunto una contraddizione_

Esistono indebolimenti del decisore, ovvero decisori /parziali/

**** Immortalitá
=4.23=
$\overline A_{\textsc{tm}}$ _positivamente decidibile_ $\implies  A_{\textsc{tm}}$ _negativamente decidibile_ per =T.Post=
- Falso per =4.11=
**** Fermata
=5.1=
| Il problema della decisione per $L_{1}$ si riduce al problema della decisione per $L_{2}$ se sappiamo trasformare un decisore per $L_{2}$ in un decisore per $L_{1}$

Per contraddizione, non é decidibile
$\textsc{halt}_{\textsc{tm}}=\{\langle M,w\rangle \mid M \mbox{ is a \textsc{tm} and }M \mbox{ halts on input } w\}$
**** Decibidilitá dei Linguaggi di Chompsky
/Simboli, Produzioni, Terminali/
Un linpuaggio definibile da una grammatica in forma normale di Chompsky é detto =context-free=
Si dimostra che il numero di passi per derivare una stringa di lunghezza $n$ é $2n-1$
Questo implica che il problema é decidibile, anche se in tempo esponenziale
- si scrivono sulla tape 2 tutte le deduzioni di lunghezza $2n-1$
- si controlla la correttezza una ad una, se ne si trova una corretta e che corrisponde accettiamo, altrimenti continuiamo, se alche l'ultima non va bene rifiutiamo
Per ridurre la complessitá si utilizza la *programmazione dinamica*
- ci si appunta i risultati intermedi
**** Emptyness
=5.2=
Si dimostra per assurdo, se esistesse si potrebbe risolvere l'accettazione
**** Equality
=5.3=
Intesa tra due =MT=
- se sapessi deciderla potrei decidere anche l'=Emptyness=

Anche per i reali:
- calcoli diversi portano anche arrotondamenti diversi, per questo reali rigorosamente uguali possono risultare diversi
- $A_{\textsc{tm}}$ si riduce a $EQ_{\textsc{Real}}$
  + e di conseguenza anche il < e il >
**** Corrispondenza di Post
**** Tassellazione - Wang Tiles
[[https://en.wikipedia.org/wiki/Wang_tile][Wikipedia]]
Solo negativamente decidibile
- le tassellazioni aperiodiche sono utilizzate per la sintesi procedurale di texture, heightfields

**** Esistenza di un DFA equivalente
=5.3=
$A_{\textsc{tm}}$ é riducibile a $\textsc{Regular}_{\textsc{tm}}$
*** Recap
- Negativamente Decidibili
  + $E_{\textsc{tm}}$
  + $\overline A_{\textsc{tm}}$
  + $\textsc{All}_{\textsc{cfg}}$
  + $\textsc{Wang}$
- Decidibili
  + $E_{\textsc{cfg}}$
  + $A_{\textsc{cfg}}$
  + $\textsc{Eq}_{\textsc{dfa}}$
- Positivamente Decidibili
  + $\overline E_{\textsc{tm}}$
  + $A_{\textsc{tm}}$
  + $\textsc{Halt}_{\textsc{tm}}$
  + $\textsc{pcp}$
- Né negativamente né positivamente decidibili
  + $\textsc{Regular}_{\textsc{tm}}$
  + $\textsc{Eq}_{\textsc{tm}}$
  + $\textsc{Context-Free}_{\textsc{tm}}$
*** Mapping Reducible Language
Il Linguaggio $A$ é /mapping reducible/ al linguaggio $B$:
$A \le_{m}B$
se esiste una /funzione computazionale/ $f$ tale che:
$w \in L(A) \iff f(w) \in L(B)$
[[../media/img/mapping-reducibility.jpg]]

Seguono i corollari:
- Se $A \le_{m}B$ e $A$ é decidibile $\implies B$ é decidibile
- Se $A \le_{m}B$ e $A$ non é decidibile $\implies B$ non é decidibile
$ciao$
$test$
