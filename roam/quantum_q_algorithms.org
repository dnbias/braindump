:PROPERTIES:
:ID:       07f2115c-edc3-4541-812b-19534cf6e019
:END:
#+title: Quantum e Algoritmi in Q#
#+date: [2022-05-12 Thu 19:31]
#+latex_class: arsclassica
#+filetags: university thesis compsci

\pagebreak
* Metadata :noexport:
- Tags: [[id:6e504ff7-9a50-4a47-901d-4c524c229bc6][Quantum Computing]], [[id:b9d02edb-6458-4237-88de-41fb865974d2][CalcCompl]], [[id:d7686f15-7f24-476e-9ecf-87ef577d5a4c][Deutsch-Jozsa Algorithm]]
- Sources: [[id:c2bda57f-a02a-460c-96a2-796dd2fee708][Learn Quantum Computing with Python and Q#]], [[https://medium.com/a-bit-of-qubit/deutsch-jozsa-algorithm-quantum-computing-basics-708df8c4caf7][Medium: Quantum Basics]], [[https://qiskit.org/textbook/ch-algorithms/deutsch-jozsa.html][Qiskit textbook]]
- [[./quantum_q_algorithms.pdf][PDF Version]]
* Introduzione
Lo sviluppo di software quantistici si é confermato come un'area di grande interesse negli ultimi decenni, offrendo grandi possibilità di superare i limiti computazionali attualmente compresi in diverse aree di ricerca.
É possibile che in futuro algoritmi quantistici possano sostituire controparti classiche in diverse applicazioni:
- crittografia
- problemi di ricerca
- simulazione di sistemi quantistici
- machine learning
- computazione biologica
- chimica generativa

Ovviamente il calcolo classico non verrá abbandonato, l'approccio classico e quello quantistico differiscono nelle loro forze e debolezze.
Mentre gli attuali computer diventano sempre piú veloci e le tecniche industriali permettono miniaturizzazioni sempre maggiori gli hardware quantistici rimangono estremamenti complicati da costruire e distribuire.
Il modo attualmente piú congeniale di utilizzare questi hardware per effettuare testing di software rimane quello della condivisione di risorse attraverso le tecnologie di /cloud computing/.

Ma questo non significa che non sia possibile o non sia utile studiare i problemi e le soluzioni algoritmiche che il calcolo quantistico offre a livello teorico e di sviluppo software.
Un importante punto di forza di questa tecnologia é che ci aspettiamo che i computer quantistici in generale siano molto più lenti di computer classici ma che le risorse di cui dispongono nel contesto di alcune classi di  problemi da risolvere scalino diversamente, in particolare permettendo per i problemi giunti di superare di gran lunga la /performance/ dei migliori algoritmi classici.
D'altra parte non ci si deve aspettare che questa sia una soluzione perfetta, ci sono problemi che rimarranno difficili da risolvere nonostante le nuove possibilità della computazione quantistica.

Per molto tempo l'approccio a questo campo é rimasto accessibile solo a matematici e fisici con le grandi conoscenze specifiche necessarie a comprendere appieno la meccanica quantistica e le sue sfumature tecniche.
Questo sta cambiando velocemente negli ultimi anni da quando l'industria ha cominciato a sviluppare strumenti e piattaforme che permettano a nuovi sviluppatori di interagire e imparare in quest'ambito astraendo dalla maggior parte della complessitá della teoria matematica alla base di questo modello.

** Definizione di un Computer Quantistico
Per prima cosa definiamo un /computer/ come uno strumento che prendendo dei dati in input esegue delle operazioni su questi dati.
I /computer/ che conosciamo e utiliziamo attualmente possono e sono definiti nei confini teorici della fisica classica, ovvero attraverso le leggi di Newton e l'elettromagnetismo.
Data questa definizione é semplice definire un /computer quantistico/ come uno strumento che prendendo dei dati in input esegue delle operazioni si questi dati con processi descrivibili solo utilizzando i concetti della fisica quantistica.
Detto questo la differenza tra un computer classico e un computer quantistico é la stessa che esiste tra la fisica classica e quella quantistica. La principale differenza é la scala su cui operano in termini di dimensioni e energia.
I calcolatori quantistici sono in ogni caso controllati tramite interfacce e strumenti classici con cui é piú semplice interagire e tramite cui i dati sono riconvertiti in dati di tipo classico utilizzabili dalle =CPU= che comunemente utiliziamo.

** Limiti Hardware
Attualmente i software sviluppati per hardware quantistici possono essere eseguiti su simulatori, sempre software, oppure sfruttando reali macchine quantistiche in remoto.
Questo é necessario in quanto i requisiti e limiti tecnici della costruzione di un calcolatore quantistico sono estremamente complessi e richiedono ambienti fisici attualmente incompatibili con un utilizzo desktop.
Questi limiti sono in particolare l'estrema sensibilità dei registri all'interno di un computer simile ai segnali elettromagnetici esterni, per ovviare a problemi di interferenza é necessario mantenere l'hadware in temperature vicine allo zero termico ($0\text{K}$ o $-273.15^{\circ}\text{C}$).
Queste condizioni non sono ovviamente replicabili in un ambiente non strettamente controllato e isolato.

Dati questi limiti é facile dire che per molto tempo ancora questo tipo di hardware sarà limitato a un utilizzo da remoto, servizi come =Amazon Quantum= renderanno sempre più facilmente disponibile l'accesso a questi strumenti.

I simulatori e le macchine reali condividono interfacce condivise che permettono lo sviluppo di software che abbia la possibilitá di essere testato in maniera indiscriminata su un qualsiasi di questi.

** Utilizzi della tecnologia
I computer quantistici offrono nuove possibilità nella risoluzione di diverse classi di problemi, la ricerca in questo campo ha trovato alcuni esempi di algoritmi che utilizzando le proprietà particolari di questo approccio per sviluppare un vantaggio nei confronti dell'approccio classico.

Ad esempio:
- L'*algoritmo di Grover* effettua una ricerca in una lista di $N$ elementi in $O(\sqrt{N})$
- L'*algoritmo di Shor* fattorizza velocemente grandi numeri, in particolare permette di fattorizzare con un grado di errore arbitrariamente piccolo un numero polinomiale di passi rispetto alla lunghezza in bit dell'input
- L'*algoritmo di Deutsch-Jozsa* verifica se una funzione é costante o bilanciata in $O(1)$
- La stima di una somma di Gauss, un tipo di somma esponenziale, con precisione polinomiale e in tempo polinomiale contro il tempo esponenziale degli algoritmi classici
- La valutazioni di formule booleane complesse può essere velocizzata tramite un approccio quantistico
- Questi computer permettono di simulare sistemi quantistici permettendone uno studio più approfondito
- La generazioni di numeri casuale é un'importante componente della crittologia e utilizzando tecniche quantistiche é possibile generarne che siano davvero casuali e non piú pseudo-casuali come necessario in computer classici

Questi sono risultati importanti e in particolare l'algoritmo di Shor pone dei dubbi sulla sicurezza degli attuali protocolli crittografici che si basano sulla difficolta computazionale della fattorizzazione di grandi numeri interi.
Se tale algoritmo fosse facilmente eseguibile significherebbe che un attaccante facilmente violare questi protocolli di sicurezza correntemente alla base della comunicazione via Intenet.

Rimane difficile trovare possibili algoritmi quantistici che diano un vantaggio computazionale nel campo dell'apprendimento automatico dove é fondamentale l'accesso casuale a una grande quantità di dati.

In generale é più probabile che un problema che abbia una piccola mole di dati in entrata e in uscita ma una grande quantità di manipolazioni per arrivare all'output sia un buon candidato per l'utilizzo di computer quantistici.

\pagebreak
* Ambiente
Per lo sviluppo di software quantistici sono disponibili diversi ambienti e framework, tra i piú conosciuti troviamo *Microsoft Azure* con il proprio Quantum Development Kit (=QDK=) o l'ambiente di sviluppo di =IBM= *Qiskit*.
Altri /Software Development Kit/ che possono essere utilizzati per eseguire circuiti quantistici su prototipi di device quantistici o simulatori sono:
- Ocean
- ProjectQ
- Forest
- t|ket>
- Strawberry Fields
- PennyLane
Molti di questi progetti sono open-source e sviluppati sulla base di ~Python~.

Per questo lavoro abbiamo utilizzato gli strumenti offerti da Microsoft  per l'ottima documentazione consultabile sulle loro pagine web e in quanto era ció che era utilizzato dalla nostra fonte principale /Learn Quantum Computing with Python and Q#/.

L'ambiente di esecuzione ~Q#~ puó essere configurato sul editor =Visual Studio Code= tramite l'add-on proprietario di Microsoft.
Quest'ultimo é disponibile solo sulla versione non =FOSS= del software, che é possibile installare tramite le repository opensource linux.

In alternativa o anche parallelamente é possibile sviluppare codice ~Q#~ ed eseguirlo tramite =Jupyter Notebook= tramite ~Python~. Questo con i kernel necessari installati, quindi l'ultima versione di ~dotnet~ disponibile.

Tramite =anaconda= si crea un ambiente con il necessario:
#+begin_src shell
$ conda create -n qsharp-env -c microsoft qsharp notebook
$ conda activate qsharp-env
#+end_src

L'esecuzione del software ~Q#~ puo' essere testato localmente predisponendo un ambiente di simulazione tramite il pacchetto ~Python~ chiamato ~qsharp~.

#+caption: host.py
#+begin_src python
import qsharp
from QsharpNamespace import Operation_One, Operation_Two
var1 = 10
print("Simulation started...")
Operation_One.simulate(par1=var1)
Operation_Two.simulate(par2=var1,par3=5)
#+end_src
Ad esempio come nel listato qui sopra utiliziamo uno script ~host.py~ per creare un ambiente di simulazione per poter eseguire le operazioni ~Q#~ definite in ~Operation_One~ e ~Operation_Two~.
Il pacchetto automaticamente va a cercare nella directory locale le definizioni.

#+caption: qsharp-interop.py
#+begin_src python
import qsharp

prepare_qubit = qsharp.compile("""
    open Microsoft.Quantum.Diagnostics;

    operation PrepareQubit(): Unit {
        using (qubit = Qubit()) {
            DumpMachine();
        }
    }
""")

if __name__ == "__main__":
    prepare_qubit.simulate()
#+end_src

Un esempio più complesso può essere quello  definito in ~qsharp-inteop.py~ dove definiamo direttamente /inline/ il contenuto del codice =Q#=  che il ~package qsharp~ compila e simula.

\pagebreak
* Oracoli
Gli oracoli che utiliziamo per testare gli algoritmi definiti in seguito sono:
#+name: oracles.qs
#+Begin_src c
operation ApplyZeroOracle(control : Qubit, target : Qubit) : Unit {
  }

  operation ApplyOneOracle(control : Qubit, target : Qubit) : Unit {
    X(target);
  }

  operation ApplyZeroOracleN(control : Qubit[], target : Qubit) : Unit {
  }

  operation ApplyOneOracleN(control : Qubit[], target : Qubit) : Unit {
    X(target);
  }

  operation ApplyIdOracle(control : Qubit, target : Qubit) : Unit {
    CNOT(control,target);
  }

  operation ApplyXOROracleN(control : Qubit[], target : Qubit) : Unit {
    for qubit in control {
        CNOT(qubit,target);
    }
  }

  operation ApplyNotOracle(control : Qubit, target : Qubit) : Unit {
    X(control);
    CNOT(control,target);
    X(control);
  }
#+end_src
Dove sono definiti versioni a singolo qbit e a n-qbit degli oracoli quantistici di alcune funzioni booleane costanti e bilanciate.
In particolare abbiamo definito oracoli per le seguenti funzioni:
- $f(x)=0$
- $f(x)=1$
- $f(x)=x$
- $f(x)= \lnot x$ o $f(x) = 1-x$
- $f(x, y) = x \oplus y$
  + dove $x$ e' l'input lungo $n$ qbit e $y$ e' l'output

#+attr_latex: :width 200
#+caption: esempio di oracolo bilanciato utilizzando porte CNOT
[[../static/ox-hugo/balanced-oracle.png]]

In questi casi le prime due funzioni sono costanti e le restanti sono bilanciate.

[fn:oplus] dove $\oplus$ é l'addizione modulo $2$ o =XOR=

\pagebreak
* Algoritmo di Deutsch-Jozsa
L'algoritmo di Deutsch-Jozsa ha interesse storico in quanto primo algoritmo quantico in grado di superare in performance il miglior algoritmo classico corrispondente, mostrando che possono esistere vantaggi nel calcolo quantico. Spingendo la ricerca in questa direzione per determinati problemi.

L'algoritmo tratta la decisione di una funzione $f$ booleana con $n$ bit in input
\[f(\{x_{0},x_{1},\cdots,x_{n}\}) \rightarrow 0\text{ o }1\]

Questa funzione su cui agisce l'algoritmo ha la proprietá di essere una di due forme:
- costante
- bilanciata

E quindi restituisca per tutti gli input $\{x_{0},x_{1},\cdots,x_{n}\}_{}$ lo stesso risultato se costante oppure restituisca /esattamente/ $0$ per metá degli input e $1$ per metá degli input.

** La Soluzione Classica
Nella soluzione classica nel *caso migliore* due /query/ all'oracolo sono sufficienti per riconoscere la funzione $f$ come bilanciata.
Per esempio si hanno due chiamate:
\[f(0,0,\cdots) \rightarrow 0\]
\[f(1,0,\cdots) \rightarrow 1\]

Dato che é assunto che $f$ é /garantita/ essere costante oppure bilanciata questi risultati ci dimostrano $f$ come bilanciata.

Per quanto riguarda il caso peggiore tutte le nostre interrogazioni daranno lo stesso output, decidere in modo certo che $f$ sia costante necessita di metá piú uno interrogazioni.
In quanto il numero di input possibili é $2^{n}$ questo significa che saranno necessarie $2^{n-1}+1$ interrogazioni per essere certi che $f(x)$ sia costante nel caso peggiore.

** La Soluzione Quantistica
Tramite la computazione quantica é possibile risolvere questo problema con un'unica chiamata della funzione $f(x)$.
Questo a patto che la funzione $f$ sia implementata come un oracolo quantico, che mappi:
$|x\rangle | y \rangle$ a $| x \rangle |y \oplus f(x) \rangle$ [fn:oplus]


I passi dell'algoritmo in particolare sono:
1. prepara 2 registri di =qubit=, il primo di $n$ =qubit= inizializzato a $| 0 \rangle$ e il secondo di un singolo =qubit= inizializzato a $| 1\rangle$
2. applica ~Hadamard~ a entrambi i registri
3. applica l'oracolo quantico
4. a questo punto il secondo registro puó essere ignorato, riapplica ~Hadamard~ al primo registro
5. misura il primo registro, questa risulta $1$ per $f(x)$ costante e $0$ altrimenti nel caso bilanciato

#+caption: i passi dell'algoritmo in forma di circuito
[[../media/img/deutsch_steps.png]]

\pagebreak
*** single-bit Deutsch-Jozsa
#+begin_src c
operation DeutschJozsaSingleBit(oracle : (( Qubit, Qubit ) => Unit)) : Bool {
    use control = Qubit();
    use target = Qubit();

    H(control);
    X(target);
    H(target);

    oracle(control, target);

    H(target);
    X(target);

    return MResetX(control) == One;
}
#+end_src
*** n-bit Deutsch-Jozsa
#+begin_src c
operation DeutschJozsa(size : Int, oracle : ((Qubit[], Qubit ) => Unit) ) : Bool {
    use control = Qubit[size];
    use target = Qubit();

    ApplyToEachA(H, control);
    X(target);
    H(target);

    oracle(control, target);

    H(target);
    X(target);

    let result = MResetX(control[0]) == One;
    ResetAll(control);
    return result;
}
#+end_src

\pagebreak
* Entanglement e Teletrasporto quantistico


\pagebreak
* Conclusioni


\pagebreak
