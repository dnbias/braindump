:PROPERTIES:
:ID:       ad8e431b-7af6-4eb9-99a7-41af9cd0c4ce
:END:
#+title: Microkernel Based Systems
#+date: [2023-02-27 Mon 10:56]
#+FILETAGS: erasmus university compsci

* Interfacing with Hardware
- undefined behavior is alright in output
  + tell the users not to depend on the last bits of the output
- not alright in input
  + you can define different behaviors based on the last bit

For kernel can
- program a part of memory for its use
- it's basically just another application

* Linking and loading
You build the kernel outside of a standard linux environment
- no dynamic liking
- no RTTI
- no stdlib

* Thread Switch
- userlevel \rarr kernellevel
- save the registers in =TCB=
  + to switch back restore those registers
* IPC
To send messages between threads you don't save and restore those register.
The receiving end will declare beforehand to the kernel to be willing to this and ready to have its registers overwritten.

- to avoid priority inversions if high priority =T= call and wait on low priority =T= the latter get a priority boost to not let the high one hanging

* Writing a syscall
- the kernel crashes if the root is invoked
- at the end of the syscall you have to continue the execution to the user code
