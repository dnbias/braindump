:PROPERTIES:
:ID:       ad8e431b-7af6-4eb9-99a7-41af9cd0c4ce
:END:
#+title: Microkernel Based Systems
#+date: [2023-02-27 Mon 10:56]
#+FILETAGS: erasmus university compsci

* Interfacing with Hardware
- undefined behavior is alright in output
  + tell the users not to depend on the last bits of the output
- not alright in input
  + you can define different behaviors based on the last bit

For kernel can
- program a part of memory for its use
- it's basically just another application

* Linking and loading
You build the kernel outside of a standard linux environment
- no dynamic liking
- no RTTI
- no stdlib

* Thread Switch
- userlevel \rarr kernellevel
- save the registers in =TCB=
  + to switch back restore those registers
* IPC
To send messages between threads you don't save and restore those register.
The receiving end will declare beforehand to the kernel to be willing to this and ready to have its registers overwritten.

- to avoid priority inversions if high priority =T= call and wait on low priority =T= the latter get a priority boost to not let the high one hanging

** In Multiprocessor System
- ways of interaction
  + shared memory
  + inter-processor interrupts
  + direct memory access
    - usually not available
* Page table
Traverse the data structure using the 2 indexes and the offset
* Writing a syscall
- the kernel crashes if the root is invoked
- at the end of the syscall you have to continue the execution to the user code
  + get out of the kernel and go to the address space of the user code
  + on the binary (hypervisor.o) you can see that user stack is located on address 0x1000
  + the user code is at address 0x2000 ~SEL_USER_CODE~
  + the mapping is done to the pagetable
  + basically prepare the stack with the values needed and invoke ~iret~
- in ~usercode~:
  1. fault immediately {there is a opcode for undefined behavior}

The syshandler receives the codes of the syscalls and has to switch over the different possibilities and invoke the correct one.
*NB* the kernel mode is always entered with a clean stack
