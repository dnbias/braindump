:PROPERTIES:
:ID:       b548a50a-dd36-41b8-8eb4-8fdb0f4cd078
:ROAM_ALIASES: SAS
:END:
#+title: Sviluppo Software
#+date: [2022-03-03 Thu 00:08]
#+filetags: university
- Info Corso
  + Matteo Baldoni
  + Sviluppo Agile
* Software
Include:
- tutta la documentazione elettronica che serve agli utenti dei sistemi, agli sviluppatore e i responsabili della qualitá
É caratterizzato da:
- mantenibilitá
- fidatezza
- efficienza
- accettabilitá

In generale un processo descrive
- chi
- fa cosa
- come
- quando
Per raggiungere un obiettivo

Le 4 /attivitá fondamentali/ comuni a tutti i processi software:
1. specifiche
2. sviluppo
3. convalida
4. evoluzione

** Modello a cascata
Nel _modello a cascata_ queste sono distinte e separate
- requisiti in dettaglio
  + non c'e' feedback, molto lavoro speculativo
- piano temporale delle attivitá da svolgere
- modellazione
- progetto software
- programmazione software
- verifica e rilascio
Parte dal presupposto che le specifiche sono prevedibili e stabili e possono essere definite correttamente sin dall'inizio, a fronte di un basso tasso di cambiamenti
- nella realtá questo non avviene quasi mai, questo modello é ottimo in caso di sistemi critici

** Modello di Sviluppo Incrementale
Nel _modello di sviluppo incrementale_ queste sono intrecciate, aggiunte di funzionalitá alla versione precedente (versioning)
- utilizzato in caso di requisiti che cambiano durante lo sviluppo
  + in molti casi se si procede progettando tutto fin dall'inizio si rischia di buttare molto del lavoro in seguito
- si implementano immediatamente le funzionalita' piu' critiche
  + per rilasciare il prima possibile: il /feedback/ e' l'aspetto piu' critico
  + si procede per incrementi, /patch/
    * il codice si degrada progressivamente
    * per arginare la degradazione e' necessario un continuo /refactoring/ del codice
- per il management e' piu' complesso gestire le tempistiche
  + almeno in parte puo' essere essenziale pianificare le iterazioni
- fin dall'inizio si procede con progettazione e testing del sistema

L'ambiente odierno richiede cambiamenti rapidi:
- la rapidita' delle consegne e' quindi un requisito critico
- i requisiti reali diventano chiari solo dopo il feedback degli utenti
per cio' questo metodo di sviluppo ha preso piede

Lo sviluppo e' organizzato in sotto-progetti
- progettazione
- iterazione
- test
Il progetto si adatta iterazione dopo iterazione al feedback, e' /evolutivo/
- ogni iterazione e' una scelta di un sottoinsieme dei requisiti
  + produce un sistema eseguibile e subito testabile

*** Esempi
- Unified Progress
- Extreme Programming
- Scrum
*** Vantaggi
- riduzione rischi
- progresso subito visibile
- feedback immediato
- gestione della complessita', evita la /paralisi da analisi/


** Modello di Integrazione e Configurazione
Nel _modello dell'integrazione e configurazione_ si basa su un gran numero di componenti o sistemi riutilizzabili, piccoli sistemi che vengono configurati in nuove funzionalitá

Il processo appropriato dipende dai requisiti e le politiche normative, dall'ambiente in cui il software sará utilizzato
* Object Oriented Analysis/Design
=OOA/D=

Ai concetti vengono attribuite le /responsabilitá/, a partire da queste si passa alla progettazione e poi al software
=OOD= é fortemente correlata all'/analisi dei requisiti/:
- casi d'uso
- storie utente

L'analisi si concentra sull'identificazione e la descrizione degli oggetti:
- /concetti nel dominio del problema/

Queste analisi dei requisiti sono svolte nel contesto di processi di sviluppo:
- Processo di sviluppo iterativo
- Sviluppo Agile
- Unified Process - =UP=

** Unified Process
=UP=
- cerca di bilanciarsi tra estrema agilita' e pianificazione
- la versione commerciale si chiama =RUP=, di =Rational=
- iterazioni corte e timeboxed
- raffinamento graduale
- gruppi di lavoro auto-organizzati

Orizzontalmente:
- *ideazione*
  + approssimazione
  + portata
  + studio della fattibilita'
- *elaborazione*
  + visione raffinata
  + implementazione iterativo del nucreo
  + risoluzione rischi maggiori, parte piu' critica
  + implementata l'architettura del sistema, mitigazione rischi
- *costruzione*
- *transizione*

Tutte queste fasi includono analisi, progettazione e programmazione

Verticalmente si procede con:
- discipline
  + modellazione del business
  + requisiti
  + progettazione
  + implementazione
  + test
  + rilascio
- artefatti
  + qualsiasi prodotto di lavoro

In questo processo e' utilizzato solo =UML=
- utilizzato solo se necessario, se viene tralasciato va indicato il motivo
- i diagrammi seguono le iterazioni e gli incrementi

Quasi tutto in =UP= e' opzionale, deciso dal project leader

*** Requisiti
Capacita' o condizioni a cui il sistema e il progetto devono essere conformi
- e' l'utente che li stabilisce, non il progettista

Possono essere
- /funzionali/
  + requisiti comportamentali
  + comportamenti del sistema
- /non funzionali/
  + scalabilita'
  + sicurezza
  + tempi di risposta
  + fattori umani
  + usabilita'

Nei processi a cascata sono molti i requisiti non utilizzati nei casi d'uso
- spreco di tempo, denaro, rischi in piu'
Per evitare questo =UP= spinge al feedback

Modello requisiti =FURPS+=
- modello dei casi d'uso
- specifiche supplementali
- glossario
- visione
- regole di business

La disciplina dei requisiti e' il processo per scoprire cosa deve essere costruito e orientare la sviluppo verso il sistema corretto
Si incrementalmente una lista dei requisiti: /feature list/
- breave descrizione
- stato
- costi stimati di implementazione
- priorita'
- rischio stimato per l'implementazione

**** Casi d'uso
Catturano (in =UP= e =Agile=) i requisiti funzionali
Sono descrizioni testuali che indicano l'uso che l'utente fara' del sistema
- attori; qualcuno o qualcoso dotato di comportamento
- scenario (istanza di caso d'uso); sequenza specifica di azioni e interazioni tra sistema e attori
- caso d'uso; collezione di scenari correlati (di successo/fallimento) che descrivono un attore che usa il sistema per raggiungere un obiettivo specifico

=UP= e' /use-case driven/, questi sono il modo in cui si definiscono i requisiti di sistema
- i casi d'uso definiscono analisi e progettazione
- i casi sono utilizzati per pianificare le iterazioni
- i casi definiscono i test

Il *modello dei casi d'uso* include un grafico =UML=
- e' un modello delle funzionalita' del sistema

I casi d'uso non sono orientati agli oggetti, ma sono utili a rappresentare i requisiti come input all' =OOA/D=
- l'enfasi e' sull'utente, sono il principale metodo di inclusione dell'attore nel processo di sviluppo
- questi non sono algoritmi, sono semplici descrizioni dell'interazione, non la specifica di implementazione
  + il /come/ e' obiettivo della progettazione =OOD=
  + i casi descrivono gli eventi o le interazioni tra attori e sistema, si tratta il /cosa/ e nulla riguardo al /come/

***** Attori
Sono ruoli svolti da persone, organizzazioni, sotware, macchine
- primario
- di supporto
  + offre un servizio al sistema
  + chiarisce interfacce esterne e protocolli
- fuori scena
  + ha interesse nel comportamento del caso d'uso

***** Formati
- breve
  + un solo paragrafo informale che descrive solitamente lo scenario principale
- informale
  + piu' paragrafi in modo informale che descrivono vari scenari
- dettagliato
  + include precondizioni e garanzie di successo
**** Requisiti non funzionali
Possono essere inclusi nei casi d'uso se relazionati con il requisito funzinale descritto dal caso
Altrimenti vengono descritti nelle specifiche supplementari

*** Modello di dominio
Casi d'uso e specifiche supplementari sono input che vanno a definire il modello di dominio

*** Ideazione
Si tratta dello studio di fattibilita'
- si decide se il caso merita un'analisi piu' completa

La documentazione possibile e' tanta ma tutto e' opzionale
- va documentato solo cio' che aggiunge valore al progetto

*** Elaborazione
Alla fine di questa fase si ha un'idea chiara del progetto
- vengono stipulati contratti e obiettivi chiari, temporali e sui requisiti
*** Costruzione
Durante questa fale i requisiti principali dovrebbero essere stabili
*** Transizione

* Unified Modeling Language
=UML=

Strumento per pensare e comunicare
- utilizzato per rappresentare il modello di dominio/concettuale
- permette un passaggio piú veloce da modello a design/progettazione
  + il gap rappresentativo sará piú semplice

_É un linguaggio visuale per la specifica, la costruzione e la documentazione degli elaborati di un sistema software_
- de facto standard un particolare per software OO
- puó essere utilizzato come abbozzo, progetto o linguaggio di programmazione
- la modellazione agile enfatizza l'uso di =UML= come abbozzo

* Pattern
Riassunto di esperienze precedenti

* Laboratorio
Progetto =Cat & Ring=
** Fase Preliminare dell'ideazione
*** Glossario
